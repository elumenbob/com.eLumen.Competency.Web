/*
 * Competency Service OpenAPI (JSON) Definition
 *
 * The Competency Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Modelling approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.Standard.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CompetencyContextType :  IEquatable<CompetencyContextType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetencyContextType" /> class.
        /// </summary>
        /// <param name="CompetencyGUID">CompetencyGUID (required).</param>
        /// <param name="CompetencyId">Model Primitive Datatype &#x3D; AnyURI.</param>
        /// <param name="OrganizationCompetencyCode">Model Primitive Datatype &#x3D; NormalizedString (required).</param>
        /// <param name="CompetencyEffectiveDate">Model Primitive Datatype &#x3D; DateTime.</param>
        /// <param name="CompetencyTerminationDate">Model Primitive Datatype &#x3D; DateTime.</param>
        /// <param name="CompetencyStatement">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="CompetencyLabel">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="CompetencyType">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="CompetencyRelationshipSet">CompetencyRelationshipSet.</param>
        /// <param name="CompetencyReferenceHierarchy">CompetencyReferenceHierarchy.</param>
        public CompetencyContextType(GUIDType CompetencyGUID = null, string CompetencyId = null, string OrganizationCompetencyCode = null, DateTime? CompetencyEffectiveDate = null, DateTime? CompetencyTerminationDate = null, string CompetencyStatement = null, string CompetencyLabel = null, string CompetencyType = null, CompetencyRelationshipSetType CompetencyRelationshipSet = null, List<GUIDType> CompetencyReferenceHierarchy = null)
        {
            // to ensure "CompetencyGUID" is required (not null)
            if (CompetencyGUID == null)
            {
                throw new InvalidDataException("CompetencyGUID is a required property for CompetencyDefinitionType and cannot be null");
            }
            else
            {
                this.CompetencyGUID = CompetencyGUID;
            }
            // to ensure "OrganizationCompetencyCode" is required (not null)
            if (OrganizationCompetencyCode == null)
            {
                throw new InvalidDataException("OrganizationCompetencyCode is a required property for CompetencyDefinitionType and cannot be null");
            }
            else
            {
                this.OrganizationCompetencyCode = OrganizationCompetencyCode;
            }
            this.CompetencyId = CompetencyId;
            this.CompetencyEffectiveDate = CompetencyEffectiveDate;
            this.CompetencyTerminationDate = CompetencyTerminationDate;
            this.CompetencyStatement = CompetencyStatement;
            this.CompetencyLabel = CompetencyLabel;
            this.CompetencyType = CompetencyType;
            this.CompetencyRelationshipSet = CompetencyRelationshipSet;
            this.CompetencyReferenceHierarchy = CompetencyReferenceHierarchy;
            
        }

        /// <summary>
        /// Gets or Sets CompetencyGUID
        /// </summary>
        public GUIDType CompetencyGUID { get; set; }

        /// <summary>
        /// Model Primitive Datatype = AnyURI
        /// </summary>
        /// <value>Model Primitive Datatype = AnyURI</value>
        public string CompetencyId { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string OrganizationCompetencyCode { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        public DateTime? CompetencyEffectiveDate { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        public DateTime? CompetencyTerminationDate { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string CompetencyStatement { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string CompetencyLabel { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string CompetencyType { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyRelationshipSet
        /// </summary>
        public CompetencyRelationshipSetType CompetencyRelationshipSet { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyReferenceHierarchy
        /// </summary>
        public List<GUIDType> CompetencyReferenceHierarchy { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetencyDefinitionType {\n");
            sb.Append("  CompetencyGUID: ").Append(CompetencyGUID).Append("\n");
sb.Append("  CompetencyId: ").Append(CompetencyId).Append("\n");
sb.Append("  OrganizationCompetencyCode: ").Append(OrganizationCompetencyCode).Append("\n");
sb.Append("  CompetencyEffectiveDate: ").Append(CompetencyEffectiveDate).Append("\n");
sb.Append("  CompetencyTerminationDate: ").Append(CompetencyTerminationDate).Append("\n");
sb.Append("  CompetencyStatement: ").Append(CompetencyStatement).Append("\n");
sb.Append("  CompetencyLabel: ").Append(CompetencyLabel).Append("\n");
sb.Append("  CompetencyType: ").Append(CompetencyType).Append("\n");
sb.Append("  CompetencyRelationshipSet: ").Append(CompetencyRelationshipSet).Append("\n");
sb.Append("  CompetencyReferenceHierarchy: ").Append(CompetencyReferenceHierarchy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CompetencyDefinitionType)obj);
        }

        /// <summary>
        /// Returns true if CompetencyDefinitionType instances are equal
        /// </summary>
        /// <param name="other">Instance of CompetencyDefinitionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetencyContextType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CompetencyGUID == other.CompetencyGUID ||
                    this.CompetencyGUID != null &&
                    this.CompetencyGUID.Equals(other.CompetencyGUID)
                ) && 
                (
                    this.CompetencyId == other.CompetencyId ||
                    this.CompetencyId != null &&
                    this.CompetencyId.Equals(other.CompetencyId)
                ) && 
                (
                    this.OrganizationCompetencyCode == other.OrganizationCompetencyCode ||
                    this.OrganizationCompetencyCode != null &&
                    this.OrganizationCompetencyCode.Equals(other.OrganizationCompetencyCode)
                ) && 
                (
                    this.CompetencyEffectiveDate == other.CompetencyEffectiveDate ||
                    this.CompetencyEffectiveDate != null &&
                    this.CompetencyEffectiveDate.Equals(other.CompetencyEffectiveDate)
                ) && 
                (
                    this.CompetencyTerminationDate == other.CompetencyTerminationDate ||
                    this.CompetencyTerminationDate != null &&
                    this.CompetencyTerminationDate.Equals(other.CompetencyTerminationDate)
                ) && 
                (
                    this.CompetencyStatement == other.CompetencyStatement ||
                    this.CompetencyStatement != null &&
                    this.CompetencyStatement.Equals(other.CompetencyStatement)
                ) && 
                (
                    this.CompetencyLabel == other.CompetencyLabel ||
                    this.CompetencyLabel != null &&
                    this.CompetencyLabel.Equals(other.CompetencyLabel)
                ) && 
                (
                    this.CompetencyType == other.CompetencyType ||
                    this.CompetencyType != null &&
                    this.CompetencyType.Equals(other.CompetencyType)
                ) && 
                (
                    this.CompetencyRelationshipSet == other.CompetencyRelationshipSet ||
                    this.CompetencyRelationshipSet != null &&
                    this.CompetencyRelationshipSet.Equals(other.CompetencyRelationshipSet)
                ) && 
                (
                    this.CompetencyReferenceHierarchy == other.CompetencyReferenceHierarchy ||
                    this.CompetencyReferenceHierarchy != null &&
                    this.CompetencyReferenceHierarchy.SequenceEqual(other.CompetencyReferenceHierarchy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CompetencyGUID != null)
                    hash = hash * 59 + this.CompetencyGUID.GetHashCode();
                    if (this.CompetencyId != null)
                    hash = hash * 59 + this.CompetencyId.GetHashCode();
                    if (this.OrganizationCompetencyCode != null)
                    hash = hash * 59 + this.OrganizationCompetencyCode.GetHashCode();
                    if (this.CompetencyEffectiveDate != null)
                    hash = hash * 59 + this.CompetencyEffectiveDate.GetHashCode();
                    if (this.CompetencyTerminationDate != null)
                    hash = hash * 59 + this.CompetencyTerminationDate.GetHashCode();
                    if (this.CompetencyStatement != null)
                    hash = hash * 59 + this.CompetencyStatement.GetHashCode();
                    if (this.CompetencyLabel != null)
                    hash = hash * 59 + this.CompetencyLabel.GetHashCode();
                    if (this.CompetencyType != null)
                    hash = hash * 59 + this.CompetencyType.GetHashCode();
                    if (this.CompetencyRelationshipSet != null)
                    hash = hash * 59 + this.CompetencyRelationshipSet.GetHashCode();
                    if (this.CompetencyReferenceHierarchy != null)
                    hash = hash * 59 + this.CompetencyReferenceHierarchy.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CompetencyContextType left, CompetencyContextType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompetencyContextType left, CompetencyContextType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
