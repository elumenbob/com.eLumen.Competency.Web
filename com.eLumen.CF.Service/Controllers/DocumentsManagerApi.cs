/*
 * Machine Readable Framework for Learning Standards and Competencies Service OpenAPI (JSON) Definition
 *
 * The Machine Readable Framework for Learning Standards and Competencies Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using com.eLumen.CF.Service.Models;
using com.eLumen.Competency.Data;
using com.eLumen.Competency.Domain;
using com.eLumen.CF.Service.Mapper;
using Microsoft.Extensions.Options;
using com.eLumen.CF.Service.Configuration;

namespace com.eLumen.CF.Service.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DocumentsManagerApiController : Controller
    {
        string _connectionString = null;

        public DocumentsManagerApiController(IOptions<ApplicationOptions> connectionString)
        {
            _connectionString = connectionString.Value.elumen_connection;
        }

        /// <summary>
        /// The REST read request message for the getAllCFDocuments() API call.
        /// </summary>
        /// <remarks>This is a request to the Service Provider to provide all of the Competency Framework Documents. </remarks>
        /// <response code="200">...tbd...</response>
        /// <response code="0">StatusInfo Error Report</response>
        [HttpGet]
        [Route("/ims/mrflsc/v1p0/CFDocuments")]
        [SwaggerOperation("GetAllCFDocuments")]
        [SwaggerResponse(200, type: typeof(CFDocumentSetType))]
        public virtual IActionResult GetAllCFDocuments()
        {
            int? limit = 100;
            int? offset = 0;
            string filter = string.Empty;
            CompetencyContextData data = new CompetencyContextData(_connectionString);
            CFDocumentSetType example = null;

            if (!string.IsNullOrEmpty(filter))
            {
                string[] filters = filter.Split('=');

                if (filters.Length == 2)
                {
                    switch (filters[1])
                    {
                        case "COURSE":
                            List<Course> courses = data.GetCourses(limit ?? 100, offset ?? 0);
                            example = CFDocumentSetMapper.Map(courses);
                            break;
                        case "ORGANIZATION":
                            List<Organization> orgs = data.GetOrganizations(limit ?? 100, offset ?? 0);
                            example = CFDocumentSetMapper.Map(orgs);
                            break;
                        case "CREDENTIAL":
                            List<Credential> creds = data.GetCredentials(limit ?? 100, offset ?? 0);
                            example = CFDocumentSetMapper.Map(creds);
                            break;
                    }
                }
            }

            if (example == null)
            {
                List<Course> courses = data.GetCourses(limit ?? 100, offset ?? 0);
                example = CFDocumentSetMapper.Map(courses);
            }
            return new ObjectResult(example);
        }


        /// <summary>
        /// The REST read request message for the getCFDocument() API call.
        /// </summary>
        /// <remarks>This is a request to the service provider to provide the information for the specific Competency Framework Document. If the identified record cannot be found then the &#39;unknownobject&#39; status code must be reported.</remarks>
        /// <param name="sourcedId">The GUID that identifies the Competency Framework Document that is to be read from the service provider.</param>
        /// <response code="200">...tbd...</response>
        /// <response code="0">StatusInfo Error Report</response>
        [HttpGet]
        [Route("/ims/mrflsc/v1p0/CFDocuments/{sourcedId}")]
        [SwaggerOperation("GetCFDocument")]
        [SwaggerResponse(200, type: typeof(CFDocumentType))]
        public virtual IActionResult GetCFDocument([FromRoute]string sourcedId)
        {
            CompetencyContextData data = new CompetencyContextData(_connectionString);

            if (!sourcedId.Contains(".")) return new BadRequestResult();

            string[] sourceValues = sourcedId.Split('.');
            ObjectResult result = null;

            switch (sourceValues[0])
            {
                case "COURSE":
                    Course course = data.GetCourse(sourceValues[1]);

                    if (course != null)
                    {
                        var example = CFDocumentSetMapper.Map(course).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
                case "CREDENTIAL":
                    Credential cred = data.GetCredential(sourceValues[1]);

                    if (cred != null)
                    {
                        var example = CFDocumentSetMapper.Map(cred).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
                case "ORGANIZATION":
                    Organization org = data.GetOrganization(sourceValues[2]);

                    if (org != null)
                    {
                        var example = CFDocumentSetMapper.Map(org).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
            }

            if (result == null) return new NotFoundObjectResult(sourcedId);

            return result;
        }
    }
}
