/*
 * Machine Readable Framework for Learning Standards and Competencies Service OpenAPI (JSON) Definition
 *
 * The Machine Readable Framework for Learning Standards and Competencies Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.CF.Service.Models
{
    /// <summary>
    /// The container for the data about a competency framework document (CFDocument). A CFDocument is the root for the creation of a learning standard/competency.
    /// </summary>
    [DataContract]
    public partial class CFDocumentType :  IEquatable<CFDocumentType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFDocumentType" /> class.
        /// </summary>
        /// <param name="Identifier">Identifier (required).</param>
        /// <param name="Uri">Model Primitive Datatype &#x3D; AnyURI (required).</param>
        /// <param name="Creator">Model Primitive Datatype &#x3D; NormalizedString (required).</param>
        /// <param name="Title">Model Primitive Datatype &#x3D; NormalizedString (required).</param>
        /// <param name="LastChangeDateTime">Model Primitive Datatype &#x3D; DateTime (required).</param>
        /// <param name="OfficialSourceURL">OfficialSourceURL.</param>
        /// <param name="Publisher">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="Description">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="Subject">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="SubjectURI">SubjectURI.</param>
        /// <param name="Language">Model Primitive Datatype &#x3D; Language.</param>
        /// <param name="Version">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="AdoptionStatus">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="StatusStartDate">Model Primitive Datatype &#x3D; Date.</param>
        /// <param name="StatusEndDate">Model Primitive Datatype &#x3D; Date.</param>
        /// <param name="LicenseURI">LicenseURI.</param>
        /// <param name="Notes">Model Primitive Datatype &#x3D; String.</param>
        /// <param name="CFPackageURI">Model Primitive Datatype &#x3D; AnyURI (required).</param>
        public CFDocumentType(GUIDType Identifier, string Uri, string Creator, string Title, DateTime LastChangeDateTime, string CFPackageURI, URLType OfficialSourceURL = null, string Publisher = null, string Description = null, List<string> Subject = null, LinkURIType SubjectURI = null, string Language = null, string Version = null, string AdoptionStatus = null, DateTime? StatusStartDate = null, DateTime? StatusEndDate = null, LinkURIType LicenseURI = null, string Notes = null)
        {
            // to ensure "Identifier" is required (not null)
            if (Identifier == null)
            {
                throw new InvalidDataException("Identifier is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.Identifier = Identifier;
            }
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            // to ensure "Creator" is required (not null)
            if (Creator == null)
            {
                throw new InvalidDataException("Creator is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.Creator = Creator;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "LastChangeDateTime" is required (not null)
            if (LastChangeDateTime == null)
            {
                throw new InvalidDataException("LastChangeDateTime is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.LastChangeDateTime = LastChangeDateTime;
            }
            // to ensure "CFPackageURI" is required (not null)
            if (CFPackageURI == null)
            {
                throw new InvalidDataException("CFPackageURI is a required property for CFDocumentType and cannot be null");
            }
            else
            {
                this.CFPackageURI = CFPackageURI;
            }
            this.OfficialSourceURL = OfficialSourceURL;
            this.Publisher = Publisher;
            this.Description = Description;
            this.Subject = Subject;
            this.SubjectURI = SubjectURI;
            this.Language = Language;
            this.Version = Version;
            this.AdoptionStatus = AdoptionStatus;
            this.StatusStartDate = StatusStartDate;
            this.StatusEndDate = StatusEndDate;
            this.LicenseURI = LicenseURI;
            this.Notes = Notes;
            
        }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier")]
        public GUIDType Identifier { get; set; }

        /// <summary>
        /// Model Primitive Datatype = AnyURI
        /// </summary>
        /// <value>Model Primitive Datatype = AnyURI</value>
        [DataMember(Name="uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="creator")]
        public string Creator { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        [DataMember(Name="lastChangeDateTime")]
        public DateTime? LastChangeDateTime { get; set; }

        /// <summary>
        /// Gets or Sets OfficialSourceURL
        /// </summary>
        [DataMember(Name="officialSourceURL")]
        public URLType OfficialSourceURL { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="publisher")]
        public string Publisher { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="subject")]
        public List<string> Subject { get; set; }

        /// <summary>
        /// Gets or Sets SubjectURI
        /// </summary>
        [DataMember(Name="subjectURI")]
        public LinkURIType SubjectURI { get; set; }

        /// <summary>
        /// Model Primitive Datatype = Language
        /// </summary>
        /// <value>Model Primitive Datatype = Language</value>
        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        [DataMember(Name="adoptionStatus")]
        public string AdoptionStatus { get; set; }

        /// <summary>
        /// Model Primitive Datatype = Date
        /// </summary>
        /// <value>Model Primitive Datatype = Date</value>
        [DataMember(Name="statusStartDate")]
        public DateTime? StatusStartDate { get; set; }

        /// <summary>
        /// Model Primitive Datatype = Date
        /// </summary>
        /// <value>Model Primitive Datatype = Date</value>
        [DataMember(Name="statusEndDate")]
        public DateTime? StatusEndDate { get; set; }

        /// <summary>
        /// Gets or Sets LicenseURI
        /// </summary>
        [DataMember(Name="licenseURI")]
        public LinkURIType LicenseURI { get; set; }

        /// <summary>
        /// Model Primitive Datatype = String
        /// </summary>
        /// <value>Model Primitive Datatype = String</value>
        [DataMember(Name="notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Model Primitive Datatype = AnyURI
        /// </summary>
        /// <value>Model Primitive Datatype = AnyURI</value>
        [DataMember(Name="CFPackageURI")]
        public string CFPackageURI { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFDocumentType {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  LastChangeDateTime: ").Append(LastChangeDateTime).Append("\n");
            sb.Append("  OfficialSourceURL: ").Append(OfficialSourceURL).Append("\n");
            sb.Append("  Publisher: ").Append(Publisher).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectURI: ").Append(SubjectURI).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  AdoptionStatus: ").Append(AdoptionStatus).Append("\n");
            sb.Append("  StatusStartDate: ").Append(StatusStartDate).Append("\n");
            sb.Append("  StatusEndDate: ").Append(StatusEndDate).Append("\n");
            sb.Append("  LicenseURI: ").Append(LicenseURI).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  CFPackageURI: ").Append(CFPackageURI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CFDocumentType)obj);
        }

        /// <summary>
        /// Returns true if CFDocumentType instances are equal
        /// </summary>
        /// <param name="other">Instance of CFDocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFDocumentType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Identifier == other.Identifier ||
                    this.Identifier != null &&
                    this.Identifier.Equals(other.Identifier)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.Creator == other.Creator ||
                    this.Creator != null &&
                    this.Creator.Equals(other.Creator)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.LastChangeDateTime == other.LastChangeDateTime ||
                    this.LastChangeDateTime != null &&
                    this.LastChangeDateTime.Equals(other.LastChangeDateTime)
                ) && 
                (
                    this.OfficialSourceURL == other.OfficialSourceURL ||
                    this.OfficialSourceURL != null &&
                    this.OfficialSourceURL.Equals(other.OfficialSourceURL)
                ) && 
                (
                    this.Publisher == other.Publisher ||
                    this.Publisher != null &&
                    this.Publisher.Equals(other.Publisher)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    this.SubjectURI == other.SubjectURI ||
                    this.SubjectURI != null &&
                    this.SubjectURI.Equals(other.SubjectURI)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.AdoptionStatus == other.AdoptionStatus ||
                    this.AdoptionStatus != null &&
                    this.AdoptionStatus.Equals(other.AdoptionStatus)
                ) && 
                (
                    this.StatusStartDate == other.StatusStartDate ||
                    this.StatusStartDate != null &&
                    this.StatusStartDate.Equals(other.StatusStartDate)
                ) && 
                (
                    this.StatusEndDate == other.StatusEndDate ||
                    this.StatusEndDate != null &&
                    this.StatusEndDate.Equals(other.StatusEndDate)
                ) && 
                (
                    this.LicenseURI == other.LicenseURI ||
                    this.LicenseURI != null &&
                    this.LicenseURI.Equals(other.LicenseURI)
                ) && 
                (
                    this.Notes == other.Notes ||
                    this.Notes != null &&
                    this.Notes.Equals(other.Notes)
                ) && 
                (
                    this.CFPackageURI == other.CFPackageURI ||
                    this.CFPackageURI != null &&
                    this.CFPackageURI.Equals(other.CFPackageURI)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Identifier != null)
                    hash = hash * 59 + this.Identifier.GetHashCode();
                    if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                    if (this.Creator != null)
                    hash = hash * 59 + this.Creator.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.LastChangeDateTime != null)
                    hash = hash * 59 + this.LastChangeDateTime.GetHashCode();
                    if (this.OfficialSourceURL != null)
                    hash = hash * 59 + this.OfficialSourceURL.GetHashCode();
                    if (this.Publisher != null)
                    hash = hash * 59 + this.Publisher.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                    if (this.SubjectURI != null)
                    hash = hash * 59 + this.SubjectURI.GetHashCode();
                    if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                    if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                    if (this.AdoptionStatus != null)
                    hash = hash * 59 + this.AdoptionStatus.GetHashCode();
                    if (this.StatusStartDate != null)
                    hash = hash * 59 + this.StatusStartDate.GetHashCode();
                    if (this.StatusEndDate != null)
                    hash = hash * 59 + this.StatusEndDate.GetHashCode();
                    if (this.LicenseURI != null)
                    hash = hash * 59 + this.LicenseURI.GetHashCode();
                    if (this.Notes != null)
                    hash = hash * 59 + this.Notes.GetHashCode();
                    if (this.CFPackageURI != null)
                    hash = hash * 59 + this.CFPackageURI.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CFDocumentType left, CFDocumentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CFDocumentType left, CFDocumentType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
