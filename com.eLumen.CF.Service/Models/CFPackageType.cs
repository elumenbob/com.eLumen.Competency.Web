/*
 * Machine Readable Framework for Learning Standards and Competencies Service OpenAPI (JSON) Definition
 *
 * The Machine Readable Framework for Learning Standards and Competencies Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.CF.Service.Models
{
    /// <summary>
    /// This is the container for all of the data for a Competency Framework Package i.e. the root CFDocument and ALL of the corresponding components i.e. the CFItems, CFAssociations and CFDefinitions.
    /// </summary>
    [DataContract]
    public partial class CFPackageType :  IEquatable<CFPackageType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFPackageType" /> class.
        /// </summary>
        /// <param name="CFDocument">CFDocument (required).</param>
        /// <param name="CFItems">CFItems (required).</param>
        /// <param name="CFAssociations">CFAssociations.</param>
        /// <param name="CFDefinitions">CFDefinitions.</param>
        /// <param name="CFRubricParts">CFRubricParts.</param>
        public CFPackageType(CFDocumentType CFDocument, List<CFItemType> CFItems, List<CFAssociationType> CFAssociations = null, CFDefinitionType CFDefinitions = null, CFRubricPartType CFRubricParts = null)
        {
            // to ensure "CFDocument" is required (not null)
            if (CFDocument == null)
            {
                throw new InvalidDataException("CFDocument is a required property for CFPackageType and cannot be null");
            }
            else
            {
                this.CFDocument = CFDocument;
            }
            // to ensure "CFItems" is required (not null)
            if (CFItems == null)
            {
                throw new InvalidDataException("CFItems is a required property for CFPackageType and cannot be null");
            }
            else
            {
                this.CFItems = CFItems;
            }
            this.CFAssociations = CFAssociations;
            this.CFDefinitions = CFDefinitions;
            this.CFRubricParts = CFRubricParts;
            
        }

        /// <summary>
        /// Gets or Sets CFDocument
        /// </summary>
        [DataMember(Name="CFDocument")]
        public CFDocumentType CFDocument { get; set; }

        /// <summary>
        /// Gets or Sets CFItems
        /// </summary>
        [DataMember(Name="CFItems")]
        public List<CFItemType> CFItems { get; set; }

        /// <summary>
        /// Gets or Sets CFAssociations
        /// </summary>
        [DataMember(Name="CFAssociations")]
        public List<CFAssociationType> CFAssociations { get; set; }

        /// <summary>
        /// Gets or Sets CFDefinitions
        /// </summary>
        [DataMember(Name="CFDefinitions")]
        public CFDefinitionType CFDefinitions { get; set; }

        /// <summary>
        /// Gets or Sets CFRubricParts
        /// </summary>
        [DataMember(Name="CFRubricParts")]
        public CFRubricPartType CFRubricParts { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFPackageType {\n");
            sb.Append("  CFDocument: ").Append(CFDocument).Append("\n");
            sb.Append("  CFItems: ").Append(CFItems).Append("\n");
            sb.Append("  CFAssociations: ").Append(CFAssociations).Append("\n");
            sb.Append("  CFDefinitions: ").Append(CFDefinitions).Append("\n");
            sb.Append("  CFRubricParts: ").Append(CFRubricParts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CFPackageType)obj);
        }

        /// <summary>
        /// Returns true if CFPackageType instances are equal
        /// </summary>
        /// <param name="other">Instance of CFPackageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFPackageType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CFDocument == other.CFDocument ||
                    this.CFDocument != null &&
                    this.CFDocument.Equals(other.CFDocument)
                ) && 
                (
                    this.CFItems == other.CFItems ||
                    this.CFItems != null &&
                    this.CFItems.SequenceEqual(other.CFItems)
                ) && 
                (
                    this.CFAssociations == other.CFAssociations ||
                    this.CFAssociations != null &&
                    this.CFAssociations.SequenceEqual(other.CFAssociations)
                ) && 
                (
                    this.CFDefinitions == other.CFDefinitions ||
                    this.CFDefinitions != null &&
                    this.CFDefinitions.Equals(other.CFDefinitions)
                ) && 
                (
                    this.CFRubricParts == other.CFRubricParts ||
                    this.CFRubricParts != null &&
                    this.CFRubricParts.Equals(other.CFRubricParts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CFDocument != null)
                    hash = hash * 59 + this.CFDocument.GetHashCode();
                    if (this.CFItems != null)
                    hash = hash * 59 + this.CFItems.GetHashCode();
                    if (this.CFAssociations != null)
                    hash = hash * 59 + this.CFAssociations.GetHashCode();
                    if (this.CFDefinitions != null)
                    hash = hash * 59 + this.CFDefinitions.GetHashCode();
                    if (this.CFRubricParts != null)
                    hash = hash * 59 + this.CFRubricParts.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CFPackageType left, CFPackageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CFPackageType left, CFPackageType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
