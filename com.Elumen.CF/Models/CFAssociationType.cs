/*
 * Machine Readable Framework for Learning Standards and Competencies Service OpenAPI (JSON) Definition
 *
 * The Machine Readable Framework for Learning Standards and Competencies Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.CF.Models
{
    /// <summary>
    /// This is the container for the data about the relationship between two CFDocuments or between two CFItems.
    /// </summary>
    [DataContract]
    public partial class CFAssociationType :  IEquatable<CFAssociationType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFAssociationType" /> class.
        /// </summary>
        /// <param name="Identifier">Identifier (required).</param>
        /// <param name="AssociationType">AssociationType (required).</param>
        /// <param name="OriginNodeIdentifier">OriginNodeIdentifier (required).</param>
        /// <param name="DestinationNodeIdentifier">DestinationNodeIdentifier (required).</param>
        /// <param name="SequenceNumber">Model Primitive Datatype &#x3D; Integer.</param>
        /// <param name="Relationship">Relationship.</param>
        /// <param name="Uri">Model Primitive Datatype &#x3D; AnyURI (required).</param>
        /// <param name="OriginNodeURI">OriginNodeURI (required).</param>
        /// <param name="DestinationNodeURI">DestinationNodeURI (required).</param>
        /// <param name="CFAssociationGroupingIdentifier">CFAssociationGroupingIdentifier.</param>
        /// <param name="CFAssociationGroupingURI">CFAssociationGroupingURI.</param>
        /// <param name="LastChangeDateTime">Model Primitive Datatype &#x3D; DateTime (required).</param>
        public CFAssociationType(GUIDType Identifier = null, string AssociationType = null, GUIDType OriginNodeIdentifier = null, GUIDType DestinationNodeIdentifier = null, int? SequenceNumber = null, List<GUIDRefType> Relationship = null, string Uri = null, LinkURIType OriginNodeURI = null, LinkURIType DestinationNodeURI = null, GUIDType CFAssociationGroupingIdentifier = null, LinkURIType CFAssociationGroupingURI = null, DateTime? LastChangeDateTime = null)
        {
            // to ensure "Identifier" is required (not null)
            if (Identifier == null)
            {
                throw new InvalidDataException("Identifier is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.Identifier = Identifier;
            }
            // to ensure "AssociationType" is required (not null)
            if (AssociationType == null)
            {
                throw new InvalidDataException("AssociationType is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.AssociationType = AssociationType;
            }
            // to ensure "OriginNodeIdentifier" is required (not null)
            if (OriginNodeIdentifier == null)
            {
                throw new InvalidDataException("OriginNodeIdentifier is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.OriginNodeIdentifier = OriginNodeIdentifier;
            }
            // to ensure "DestinationNodeIdentifier" is required (not null)
            if (DestinationNodeIdentifier == null)
            {
                throw new InvalidDataException("DestinationNodeIdentifier is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.DestinationNodeIdentifier = DestinationNodeIdentifier;
            }
            // to ensure "Uri" is required (not null)
            if (Uri == null)
            {
                throw new InvalidDataException("Uri is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.Uri = Uri;
            }
            // to ensure "OriginNodeURI" is required (not null)
            if (OriginNodeURI == null)
            {
                throw new InvalidDataException("OriginNodeURI is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.OriginNodeURI = OriginNodeURI;
            }
            // to ensure "DestinationNodeURI" is required (not null)
            if (DestinationNodeURI == null)
            {
                throw new InvalidDataException("DestinationNodeURI is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.DestinationNodeURI = DestinationNodeURI;
            }
            // to ensure "LastChangeDateTime" is required (not null)
            if (LastChangeDateTime == null)
            {
                throw new InvalidDataException("LastChangeDateTime is a required property for CFAssociationType and cannot be null");
            }
            else
            {
                this.LastChangeDateTime = LastChangeDateTime;
            }
            this.SequenceNumber = SequenceNumber;
            this.Relationship = Relationship;
            this.CFAssociationGroupingIdentifier = CFAssociationGroupingIdentifier;
            this.CFAssociationGroupingURI = CFAssociationGroupingURI;
            
        }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [DataMember(Name="identifier")]
        public GUIDType Identifier { get; set; }

        /// <summary>
        /// Gets or Sets AssociationType
        /// </summary>
        [DataMember(Name="associationType")]
        public string AssociationType { get; set; }

        /// <summary>
        /// Gets or Sets OriginNodeIdentifier
        /// </summary>
        [DataMember(Name="originNodeIdentifier")]
        public GUIDType OriginNodeIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets DestinationNodeIdentifier
        /// </summary>
        [DataMember(Name="destinationNodeIdentifier")]
        public GUIDType DestinationNodeIdentifier { get; set; }

        /// <summary>
        /// Model Primitive Datatype = Integer
        /// </summary>
        /// <value>Model Primitive Datatype = Integer</value>
        [DataMember(Name="sequenceNumber")]
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        [DataMember(Name="relationship")]
        public List<GUIDRefType> Relationship { get; set; }

        /// <summary>
        /// Model Primitive Datatype = AnyURI
        /// </summary>
        /// <value>Model Primitive Datatype = AnyURI</value>
        [DataMember(Name="uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets OriginNodeURI
        /// </summary>
        [DataMember(Name="originNodeURI")]
        public LinkURIType OriginNodeURI { get; set; }

        /// <summary>
        /// Gets or Sets DestinationNodeURI
        /// </summary>
        [DataMember(Name="destinationNodeURI")]
        public LinkURIType DestinationNodeURI { get; set; }

        /// <summary>
        /// Gets or Sets CFAssociationGroupingIdentifier
        /// </summary>
        [DataMember(Name="CFAssociationGroupingIdentifier")]
        public GUIDType CFAssociationGroupingIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets CFAssociationGroupingURI
        /// </summary>
        [DataMember(Name="CFAssociationGroupingURI")]
        public LinkURIType CFAssociationGroupingURI { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        [DataMember(Name="lastChangeDateTime")]
        public DateTime? LastChangeDateTime { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFAssociationType {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  AssociationType: ").Append(AssociationType).Append("\n");
            sb.Append("  OriginNodeIdentifier: ").Append(OriginNodeIdentifier).Append("\n");
            sb.Append("  DestinationNodeIdentifier: ").Append(DestinationNodeIdentifier).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  OriginNodeURI: ").Append(OriginNodeURI).Append("\n");
            sb.Append("  DestinationNodeURI: ").Append(DestinationNodeURI).Append("\n");
            sb.Append("  CFAssociationGroupingIdentifier: ").Append(CFAssociationGroupingIdentifier).Append("\n");
            sb.Append("  CFAssociationGroupingURI: ").Append(CFAssociationGroupingURI).Append("\n");
            sb.Append("  LastChangeDateTime: ").Append(LastChangeDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CFAssociationType)obj);
        }

        /// <summary>
        /// Returns true if CFAssociationType instances are equal
        /// </summary>
        /// <param name="other">Instance of CFAssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFAssociationType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Identifier == other.Identifier ||
                    this.Identifier != null &&
                    this.Identifier.Equals(other.Identifier)
                ) && 
                (
                    this.AssociationType == other.AssociationType ||
                    this.AssociationType != null &&
                    this.AssociationType.Equals(other.AssociationType)
                ) && 
                (
                    this.OriginNodeIdentifier == other.OriginNodeIdentifier ||
                    this.OriginNodeIdentifier != null &&
                    this.OriginNodeIdentifier.Equals(other.OriginNodeIdentifier)
                ) && 
                (
                    this.DestinationNodeIdentifier == other.DestinationNodeIdentifier ||
                    this.DestinationNodeIdentifier != null &&
                    this.DestinationNodeIdentifier.Equals(other.DestinationNodeIdentifier)
                ) && 
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                ) && 
                (
                    this.Relationship == other.Relationship ||
                    this.Relationship != null &&
                    this.Relationship.SequenceEqual(other.Relationship)
                ) && 
                (
                    this.Uri == other.Uri ||
                    this.Uri != null &&
                    this.Uri.Equals(other.Uri)
                ) && 
                (
                    this.OriginNodeURI == other.OriginNodeURI ||
                    this.OriginNodeURI != null &&
                    this.OriginNodeURI.Equals(other.OriginNodeURI)
                ) && 
                (
                    this.DestinationNodeURI == other.DestinationNodeURI ||
                    this.DestinationNodeURI != null &&
                    this.DestinationNodeURI.Equals(other.DestinationNodeURI)
                ) && 
                (
                    this.CFAssociationGroupingIdentifier == other.CFAssociationGroupingIdentifier ||
                    this.CFAssociationGroupingIdentifier != null &&
                    this.CFAssociationGroupingIdentifier.Equals(other.CFAssociationGroupingIdentifier)
                ) && 
                (
                    this.CFAssociationGroupingURI == other.CFAssociationGroupingURI ||
                    this.CFAssociationGroupingURI != null &&
                    this.CFAssociationGroupingURI.Equals(other.CFAssociationGroupingURI)
                ) && 
                (
                    this.LastChangeDateTime == other.LastChangeDateTime ||
                    this.LastChangeDateTime != null &&
                    this.LastChangeDateTime.Equals(other.LastChangeDateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Identifier != null)
                    hash = hash * 59 + this.Identifier.GetHashCode();
                    if (this.AssociationType != null)
                    hash = hash * 59 + this.AssociationType.GetHashCode();
                    if (this.OriginNodeIdentifier != null)
                    hash = hash * 59 + this.OriginNodeIdentifier.GetHashCode();
                    if (this.DestinationNodeIdentifier != null)
                    hash = hash * 59 + this.DestinationNodeIdentifier.GetHashCode();
                    if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                    if (this.Relationship != null)
                    hash = hash * 59 + this.Relationship.GetHashCode();
                    if (this.Uri != null)
                    hash = hash * 59 + this.Uri.GetHashCode();
                    if (this.OriginNodeURI != null)
                    hash = hash * 59 + this.OriginNodeURI.GetHashCode();
                    if (this.DestinationNodeURI != null)
                    hash = hash * 59 + this.DestinationNodeURI.GetHashCode();
                    if (this.CFAssociationGroupingIdentifier != null)
                    hash = hash * 59 + this.CFAssociationGroupingIdentifier.GetHashCode();
                    if (this.CFAssociationGroupingURI != null)
                    hash = hash * 59 + this.CFAssociationGroupingURI.GetHashCode();
                    if (this.LastChangeDateTime != null)
                    hash = hash * 59 + this.LastChangeDateTime.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CFAssociationType left, CFAssociationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CFAssociationType left, CFAssociationType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
