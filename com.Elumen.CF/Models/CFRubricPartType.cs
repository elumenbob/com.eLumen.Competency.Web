/*
 * Machine Readable Framework for Learning Standards and Competencies Service OpenAPI (JSON) Definition
 *
 * The Machine Readable Framework for Learning Standards and Competencies Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Specification development approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.CF.Models
{
    /// <summary>
    /// The container for the set of CFRubrics, CFRubricCriteria and CFRubricCriterionLevels associated with the CFDocument within the CFPackage.
    /// </summary>
    [DataContract]
    public partial class CFRubricPartType :  IEquatable<CFRubricPartType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CFRubricPartType" /> class.
        /// </summary>
        /// <param name="CFRubrics">CFRubrics.</param>
        /// <param name="CFRubricCriteria">CFRubricCriteria.</param>
        /// <param name="CFRubricCriterionLevels">CFRubricCriterionLevels.</param>
        public CFRubricPartType(List<CFRubricType> CFRubrics = null, List<CFRubricCriterionType> CFRubricCriteria = null, List<CFRubricCriterionLevelType> CFRubricCriterionLevels = null)
        {
            this.CFRubrics = CFRubrics;
            this.CFRubricCriteria = CFRubricCriteria;
            this.CFRubricCriterionLevels = CFRubricCriterionLevels;
            
        }

        /// <summary>
        /// Gets or Sets CFRubrics
        /// </summary>
        [DataMember(Name="CFRubrics")]
        public List<CFRubricType> CFRubrics { get; set; }

        /// <summary>
        /// Gets or Sets CFRubricCriteria
        /// </summary>
        [DataMember(Name="CFRubricCriteria")]
        public List<CFRubricCriterionType> CFRubricCriteria { get; set; }

        /// <summary>
        /// Gets or Sets CFRubricCriterionLevels
        /// </summary>
        [DataMember(Name="CFRubricCriterionLevels")]
        public List<CFRubricCriterionLevelType> CFRubricCriterionLevels { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CFRubricPartType {\n");
            sb.Append("  CFRubrics: ").Append(CFRubrics).Append("\n");
            sb.Append("  CFRubricCriteria: ").Append(CFRubricCriteria).Append("\n");
            sb.Append("  CFRubricCriterionLevels: ").Append(CFRubricCriterionLevels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CFRubricPartType)obj);
        }

        /// <summary>
        /// Returns true if CFRubricPartType instances are equal
        /// </summary>
        /// <param name="other">Instance of CFRubricPartType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CFRubricPartType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CFRubrics == other.CFRubrics ||
                    this.CFRubrics != null &&
                    this.CFRubrics.SequenceEqual(other.CFRubrics)
                ) && 
                (
                    this.CFRubricCriteria == other.CFRubricCriteria ||
                    this.CFRubricCriteria != null &&
                    this.CFRubricCriteria.SequenceEqual(other.CFRubricCriteria)
                ) && 
                (
                    this.CFRubricCriterionLevels == other.CFRubricCriterionLevels ||
                    this.CFRubricCriterionLevels != null &&
                    this.CFRubricCriterionLevels.SequenceEqual(other.CFRubricCriterionLevels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CFRubrics != null)
                    hash = hash * 59 + this.CFRubrics.GetHashCode();
                    if (this.CFRubricCriteria != null)
                    hash = hash * 59 + this.CFRubricCriteria.GetHashCode();
                    if (this.CFRubricCriterionLevels != null)
                    hash = hash * 59 + this.CFRubricCriterionLevels.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CFRubricPartType left, CFRubricPartType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CFRubricPartType left, CFRubricPartType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
