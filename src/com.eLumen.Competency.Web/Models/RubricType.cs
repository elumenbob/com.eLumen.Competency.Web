/*
 * Competency Service OpenAPI (JSON) Definition
 *
 * The Competency Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Modelling approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.Competency.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class RubricType :  IEquatable<RubricType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RubricType" /> class.
        /// </summary>
        /// <param name="RubricGUID">RubricGUID (required).</param>
        /// <param name="RubricId">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="Title">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="Criteria">Criteria.</param>
        /// <param name="CriteriaLevels">CriteriaLevels.</param>
        /// <param name="UrlReference">UrlReference.</param>
        /// <param name="Description">Model Primitive Datatype &#x3D; NormalizedString.</param>
        public RubricType(Guid RubricGUID, string RubricId = null, string Title = null, RubricCriteriaSetType Criteria = null, RubricCriterionLevelSetType CriteriaLevels = null, URLType UrlReference = null, string Description = null)
        {
            // to ensure "RubricGUID" is required (not null)
            if (RubricGUID == null)
            {
                throw new InvalidDataException("RubricGUID is a required property for RubricType and cannot be null");
            }
            else
            {
                this.RubricGUID = RubricGUID;
            }
            this.RubricId = RubricId;
            this.Title = Title;
            this.Criteria = Criteria;
            this.CriteriaLevels = CriteriaLevels;
            this.UrlReference = UrlReference;
            this.Description = Description;
            
        }

        /// <summary>
        /// Gets or Sets RubricGUID
        /// </summary>
        public Guid RubricGUID { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string RubricId { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Criteria
        /// </summary>
        public RubricCriteriaSetType Criteria { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaLevels
        /// </summary>
        public RubricCriterionLevelSetType CriteriaLevels { get; set; }

        /// <summary>
        /// Gets or Sets UrlReference
        /// </summary>
        public URLType UrlReference { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string Description { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RubricType {\n");
            sb.Append("  RubricGUID: ").Append(RubricGUID).Append("\n");
sb.Append("  RubricId: ").Append(RubricId).Append("\n");
sb.Append("  Title: ").Append(Title).Append("\n");
sb.Append("  Criteria: ").Append(Criteria).Append("\n");
sb.Append("  CriteriaLevels: ").Append(CriteriaLevels).Append("\n");
sb.Append("  UrlReference: ").Append(UrlReference).Append("\n");
sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((RubricType)obj);
        }

        /// <summary>
        /// Returns true if RubricType instances are equal
        /// </summary>
        /// <param name="other">Instance of RubricType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RubricType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.RubricGUID == other.RubricGUID ||
                    this.RubricGUID != null &&
                    this.RubricGUID.Equals(other.RubricGUID)
                ) && 
                (
                    this.RubricId == other.RubricId ||
                    this.RubricId != null &&
                    this.RubricId.Equals(other.RubricId)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Criteria == other.Criteria ||
                    this.Criteria != null &&
                    this.Criteria.Equals(other.Criteria)
                ) && 
                (
                    this.CriteriaLevels == other.CriteriaLevels ||
                    this.CriteriaLevels != null &&
                    this.CriteriaLevels.Equals(other.CriteriaLevels)
                ) && 
                (
                    this.UrlReference == other.UrlReference ||
                    this.UrlReference != null &&
                    this.UrlReference.Equals(other.UrlReference)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.RubricGUID != null)
                    hash = hash * 59 + this.RubricGUID.GetHashCode();
                    if (this.RubricId != null)
                    hash = hash * 59 + this.RubricId.GetHashCode();
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.Criteria != null)
                    hash = hash * 59 + this.Criteria.GetHashCode();
                    if (this.CriteriaLevels != null)
                    hash = hash * 59 + this.CriteriaLevels.GetHashCode();
                    if (this.UrlReference != null)
                    hash = hash * 59 + this.UrlReference.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(RubricType left, RubricType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RubricType left, RubricType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
