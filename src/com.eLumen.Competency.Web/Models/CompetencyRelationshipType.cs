/*
 * Competency Service OpenAPI (JSON) Definition
 *
 * The Competency Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Modelling approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.Competency.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CompetencyRelationshipType :  IEquatable<CompetencyRelationshipType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetencyRelationshipType" /> class.
        /// </summary>
        /// <param name="CompetencyRelationshipGUID">CompetencyRelationshipGUID (required).</param>
        /// <param name="CompetencyRelationshipType">CompetencyRelationshipType (required).</param>
        /// <param name="CompetencyFrom">CompetencyFrom (required).</param>
        /// <param name="CompetencyTo">CompetencyTo (required).</param>
        /// <param name="SequenceNumber">Model Primitive Datatype &#x3D; Integer (required).</param>
        /// <param name="Relationship">Relationship.</param>
        public CompetencyRelationshipType(Guid CompetencyRelationshipGUID, string CompetencyRelationshipType, Guid CompetencyFrom, Guid CompetencyTo, int? SequenceNumber = null, List<GUIDRefType> Relationship = null)
        {
            // to ensure "CompetencyRelationshipGUID" is required (not null)
            if (CompetencyRelationshipGUID == null)
            {
                throw new InvalidDataException("CompetencyRelationshipGUID is a required property for CompetencyRelationshipType and cannot be null");
            }
            else
            {
                this.CompetencyRelationshipGUID = CompetencyRelationshipGUID;
            }
            // to ensure "CompetencyRelationshipType" is required (not null)
            if (CompetencyRelationshipType == null)
            {
                throw new InvalidDataException("CompetencyRelationshipType is a required property for CompetencyRelationshipType and cannot be null");
            }
            else
            {
                this.RelationshipType = CompetencyRelationshipType;
            }
            // to ensure "CompetencyFrom" is required (not null)
            if (CompetencyFrom == null)
            {
                throw new InvalidDataException("CompetencyFrom is a required property for CompetencyRelationshipType and cannot be null");
            }
            else
            {
                this.CompetencyFrom = CompetencyFrom;
            }
            // to ensure "CompetencyTo" is required (not null)
            if (CompetencyTo == null)
            {
                throw new InvalidDataException("CompetencyTo is a required property for CompetencyRelationshipType and cannot be null");
            }
            else
            {
                this.CompetencyTo = CompetencyTo;
            }
            // to ensure "SequenceNumber" is required (not null)
            if (SequenceNumber == null)
            {
                throw new InvalidDataException("SequenceNumber is a required property for CompetencyRelationshipType and cannot be null");
            }
            else
            {
                this.SequenceNumber = SequenceNumber;
            }
            this.Relationship = Relationship;
            
        }

        /// <summary>
        /// Gets or Sets CompetencyRelationshipGUID
        /// </summary>
        public Guid CompetencyRelationshipGUID { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyRelationshipType
        /// </summary>
        public string RelationshipType { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyFrom
        /// </summary>
        public Guid CompetencyFrom { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyTo
        /// </summary>
        public Guid CompetencyTo { get; set; }

        /// <summary>
        /// Model Primitive Datatype = Integer
        /// </summary>
        /// <value>Model Primitive Datatype = Integer</value>
        public int? SequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Relationship
        /// </summary>
        public List<GUIDRefType> Relationship { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetencyRelationshipType {\n");
            sb.Append("  CompetencyRelationshipGUID: ").Append(CompetencyRelationshipGUID).Append("\n");
sb.Append("  CompetencyRelationshipType: ").Append(RelationshipType).Append("\n");
sb.Append("  CompetencyFrom: ").Append(CompetencyFrom).Append("\n");
sb.Append("  CompetencyTo: ").Append(CompetencyTo).Append("\n");
sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CompetencyRelationshipType)obj);
        }

        /// <summary>
        /// Returns true if CompetencyRelationshipType instances are equal
        /// </summary>
        /// <param name="other">Instance of CompetencyRelationshipType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetencyRelationshipType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CompetencyRelationshipGUID == other.CompetencyRelationshipGUID ||
                    this.CompetencyRelationshipGUID != null &&
                    this.CompetencyRelationshipGUID.Equals(other.CompetencyRelationshipGUID)
                ) && 
                (
                    this.RelationshipType == other.RelationshipType ||
                    this.RelationshipType != null &&
                    this.RelationshipType.Equals(other.RelationshipType)
                ) && 
                (
                    this.CompetencyFrom == other.CompetencyFrom ||
                    this.CompetencyFrom != null &&
                    this.CompetencyFrom.Equals(other.CompetencyFrom)
                ) && 
                (
                    this.CompetencyTo == other.CompetencyTo ||
                    this.CompetencyTo != null &&
                    this.CompetencyTo.Equals(other.CompetencyTo)
                ) && 
                (
                    this.SequenceNumber == other.SequenceNumber ||
                    this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(other.SequenceNumber)
                ) && 
                (
                    this.Relationship == other.Relationship ||
                    this.Relationship != null &&
                    this.Relationship.SequenceEqual(other.Relationship)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.CompetencyRelationshipGUID != null)
                    hash = hash * 59 + this.CompetencyRelationshipGUID.GetHashCode();
                    if (this.RelationshipType != null)
                    hash = hash * 59 + this.RelationshipType.GetHashCode();
                    if (this.CompetencyFrom != null)
                    hash = hash * 59 + this.CompetencyFrom.GetHashCode();
                    if (this.CompetencyTo != null)
                    hash = hash * 59 + this.CompetencyTo.GetHashCode();
                    if (this.SequenceNumber != null)
                    hash = hash * 59 + this.SequenceNumber.GetHashCode();
                    if (this.Relationship != null)
                    hash = hash * 59 + this.Relationship.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CompetencyRelationshipType left, CompetencyRelationshipType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompetencyRelationshipType left, CompetencyRelationshipType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
