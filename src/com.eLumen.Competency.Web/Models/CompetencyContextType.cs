/*
 * Competency Service OpenAPI (JSON) Definition
 *
 * The Competency Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Modelling approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace com.eLumen.Competency.Models
{
    /// <summary>
    /// 
    /// </summary>
    public partial class CompetencyContextType :  IEquatable<CompetencyContextType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetencyContextType" /> class.
        /// </summary>
        /// <param name="ContextGUID">ContextGUID (required).</param>
        /// <param name="ContextId">Model Primitive Datatype &#x3D; AnyURI.</param>
        /// <param name="ContextEffectiveDate">Model Primitive Datatype &#x3D; DateTime.</param>
        /// <param name="ContextTerminationDate">Model Primitive Datatype &#x3D; DateTime.</param>
        /// <param name="ContextTitle">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="ContextLabel">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="ContextType">Model Primitive Datatype &#x3D; NormalizedString.</param>
        /// <param name="CompetencyList">CompetencyList.</param>
        public CompetencyContextType(Guid ContextGUID, string ContextId = null, DateTime? ContextEffectiveDate = null, DateTime? ContextTerminationDate = null, string ContextTitle = null, string ContextLabel = null, string ContextType = null, List<CompetencyDefinitionType> CompetencyList = null)
        {
            // to ensure "ContextGUID" is required (not null)
            if (ContextGUID == null)
            {
                throw new InvalidDataException("ContextGUID is a required property for CompetencyContextType and cannot be null");
            }
            else
            {
                this.ContextGUID = ContextGUID;
            }

            this.ContextId = ContextId;
            this.ContextEffectiveDate = ContextEffectiveDate;
            this.ContextTerminationDate = ContextTerminationDate;
            this.ContextTitle = ContextTitle;
            this.ContextLabel = ContextLabel;
            this.ContextType = ContextType;
            this.CompetencyList = CompetencyList;
            
        }

        /// <summary>
        /// Gets or Sets ContextGUID
        /// </summary>
        public Guid ContextGUID { get; set; }

        /// <summary>
        /// Model Primitive Datatype = AnyURI
        /// </summary>
        /// <value>Model Primitive Datatype = AnyURI</value>
        public string ContextId { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        public DateTime? ContextEffectiveDate { get; set; }

        /// <summary>
        /// Model Primitive Datatype = DateTime
        /// </summary>
        /// <value>Model Primitive Datatype = DateTime</value>
        public DateTime? ContextTerminationDate { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string ContextTitle { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string ContextLabel { get; set; }

        /// <summary>
        /// Model Primitive Datatype = NormalizedString
        /// </summary>
        /// <value>Model Primitive Datatype = NormalizedString</value>
        public string ContextType { get; set; }

        /// <summary>
        /// Gets or Sets CompetencyList
        /// </summary>
        public List<CompetencyDefinitionType> CompetencyList { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetencyContextType {\n");
            sb.Append("  ContextGUID: ").Append(ContextGUID).Append("\n");
sb.Append("  ContextId: ").Append(ContextId).Append("\n");
sb.Append("  ContextEffectiveDate: ").Append(ContextEffectiveDate).Append("\n");
sb.Append("  ContextTerminationDate: ").Append(ContextTerminationDate).Append("\n");
sb.Append("  ContextTitle: ").Append(ContextTitle).Append("\n");
sb.Append("  ContextLabel: ").Append(ContextLabel).Append("\n");
sb.Append("  ContextType: ").Append(ContextType).Append("\n");
sb.Append("  CompetencyList: ").Append(CompetencyList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CompetencyContextType)obj);
        }

        /// <summary>
        /// Returns true if CompetencyContextType instances are equal
        /// </summary>
        /// <param name="other">Instance of CompetencyContextType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetencyContextType other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.ContextGUID == other.ContextGUID ||
                    this.ContextGUID != null &&
                    this.ContextGUID.Equals(other.ContextGUID)
                ) && 
                (
                    this.ContextId == other.ContextId ||
                    this.ContextId != null &&
                    this.ContextId.Equals(other.ContextId)
                ) && 
                (
                    this.ContextEffectiveDate == other.ContextEffectiveDate ||
                    this.ContextEffectiveDate != null &&
                    this.ContextEffectiveDate.Equals(other.ContextEffectiveDate)
                ) && 
                (
                    this.ContextTerminationDate == other.ContextTerminationDate ||
                    this.ContextTerminationDate != null &&
                    this.ContextTerminationDate.Equals(other.ContextTerminationDate)
                ) && 
                (
                    this.ContextTitle == other.ContextTitle ||
                    this.ContextTitle != null &&
                    this.ContextTitle.Equals(other.ContextTitle)
                ) && 
                (
                    this.ContextLabel == other.ContextLabel ||
                    this.ContextLabel != null &&
                    this.ContextLabel.Equals(other.ContextLabel)
                ) && 
                (
                    this.ContextType == other.ContextType ||
                    this.ContextType != null &&
                    this.ContextType.Equals(other.ContextType)
                ) && 
                (
                    this.CompetencyList == other.CompetencyList ||
                    this.CompetencyList != null &&
                    this.CompetencyList.SequenceEqual(other.CompetencyList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.ContextGUID != null)
                    hash = hash * 59 + this.ContextGUID.GetHashCode();
                    if (this.ContextId != null)
                    hash = hash * 59 + this.ContextId.GetHashCode();
                    if (this.ContextEffectiveDate != null)
                    hash = hash * 59 + this.ContextEffectiveDate.GetHashCode();
                    if (this.ContextTerminationDate != null)
                    hash = hash * 59 + this.ContextTerminationDate.GetHashCode();
                    if (this.ContextTitle != null)
                    hash = hash * 59 + this.ContextTitle.GetHashCode();
                    if (this.ContextLabel != null)
                    hash = hash * 59 + this.ContextLabel.GetHashCode();
                    if (this.ContextType != null)
                    hash = hash * 59 + this.ContextType.GetHashCode();
                    if (this.CompetencyList != null)
                    hash = hash * 59 + this.CompetencyList.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CompetencyContextType left, CompetencyContextType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompetencyContextType left, CompetencyContextType right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
