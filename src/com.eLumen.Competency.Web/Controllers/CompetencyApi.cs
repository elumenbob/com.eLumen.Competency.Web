/*
 * Competency Service OpenAPI (JSON) Definition
 *
 * The Competency Service enables the exchange of data between a Competency Records Service Provider and the consumers of the associated data. This service has been described using the IMS Model Driven Modelling approach: this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using com.eLumen.Competency.Models;
using com.eLumen.Competency.Data;
using com.eLumen.Competency.Domain;
using com.eLumen.Competency.Web.Mapper;
using Microsoft.Extensions.Options;
using com.eLumen.Competency.Web.Configuration;

namespace com.eLumen.Competency.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class CompetencyApiController : Controller
    {
        string _connectionString = null;

        public CompetencyApiController(IOptions<ApplicationOptions> connectionString)
        {
            _connectionString = connectionString.Value.elumen_connection;
        }

        /// <summary>
        /// This is a request to the Service Provider to provide all of the Competency Contexts.
        /// </summary>
        /// <remarks>For this service, a Competency Context comes in three forms- Institution, Credential (often equivalent to Program), and Course</remarks>
        /// <param name="limit">The maximum number of records to be contained in the response. Default is 100</param>
        /// <param name="offset">The number of the first record to be supplied in the segmented response message.</param>
        /// <param name="filter">The filtering rules to be applied when identifying the records to be supplied in the response message. Currently, only contextType is supported with the values of COURSE, CREDENTIAL, and ORGANIZATION.</param>
        /// <response code="200">List of @CompetencyContext records</response>
        /// <response code="403">Invalid type provided</response>
        [HttpGet]
        [Route("/competencyContext")]
        [SwaggerOperation("GetAllCompetencyContexts")]
        [SwaggerResponse(200, type: typeof(CompetencyContextSetType))]
        public virtual IActionResult GetAllCompetencyContexts([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]string filter)
        {
            CompetencyContextData data = new CompetencyContextData(_connectionString);
            CompetencyContextSetType example = null;

            if (!string.IsNullOrEmpty(filter))
            {
                string[] filters = filter.Split('=');

                if (filters.Length == 2)
                {
                    switch (filters[1])
                    {
                        case "COURSE":
                            List<Course> courses = data.GetCourses(limit ?? 100, offset ?? 0);
                            example = CompetencyContextSetMapper.Map(courses);
                            break;
                        case "ORGANIZATION":
                            List<Organization> orgs = data.GetOrganizations(limit ?? 100, offset ?? 0);
                            example = CompetencyContextSetMapper.Map(orgs);
                            break;
                        case "CREDENTIAL":
                            List<Credential> creds = data.GetCredentials(limit ?? 100, offset ?? 0);
                            example = CompetencyContextSetMapper.Map(creds);
                            break;
                    }
                }
            }

            if (example == null)
            {
                List<Course> courses = data.GetCourses(limit ?? 100, offset ?? 0);
                example = CompetencyContextSetMapper.Map(courses);
            }
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a single competency context with the specified ID.
        /// </summary>
        /// <remarks>This is a request to the Service Provider to provide the specified Competency Definition.</remarks>
        /// <param name="sourceId">Identifier of the context to return.</param>
        /// <response code="200">A single context was located for the contextId provided.</response>
        /// <response code="404">No context was located for the contextId provided</response>
        [HttpGet]
        [Route("/competencyContext/{sourceId}")]
        [SwaggerOperation("GetCompetencyContext")]
        [SwaggerResponse(200, type: typeof(CompetencyContextType))]
        public virtual IActionResult GetCompetencyContext([FromRoute]string sourceId)
        {
            CompetencyContextData data = new CompetencyContextData(_connectionString);

            if (!sourceId.Contains('.')) return new BadRequestResult();

            string[] sourceValues = sourceId.Split('.');
            ObjectResult result = null;

            switch (sourceValues[0])
            {
                case "COURSE":
                    Course course = data.GetCourse(sourceValues[1]);

                    if (course != null)
                    {
                        var example = CompetencyContextSetMapper.Map(course).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
                case "CREDENTIAL":
                    Credential cred = data.GetCredential(sourceValues[1]);

                    if (cred != null)
                    {
                        var example = CompetencyContextSetMapper.Map(cred).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
                case "ORGANIZATION":
                    Organization org = data.GetOrganization(sourceValues[1]);

                    if (org != null)
                    {
                        var example = CompetencyContextSetMapper.Map(org).ToJson();
                        result = new ObjectResult(example);
                    }
                    break;
            }

            if (result == null) return new NotFoundObjectResult(sourceId);

            return result;
        }

        /// <summary>
        /// Request to provide a list of competency definitions.
        /// </summary>
        /// <remarks>It is more appropriate to request definitions within a particular competency context.</remarks>
        /// <param name="limit">To define the download segmentation value i.e. the maximum number of records to be contained in the response.</param>
        /// <param name="offset">The number of the first record to be supplied in the segmented response message.</param>
        /// <param name="filter">The filtering rules to be applied when identifying the records to be supplied in the response message.</param>
        /// <response code="200">List of competency definitions</response>
        /// <response code="404">No definitions were located meeting the filter criteria</response>
        [HttpGet]
        [Route("/competencyDefinitions")]
        [SwaggerOperation("GetAllCompetencyDefinitions")]
        [SwaggerResponse(200, type: typeof(CompetencyDefinitionSetType))]
        public virtual IActionResult GetAllCompetencyDefinitions([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]string filter)
        {
            CompetencyDefinitionData data = new CompetencyDefinitionData(_connectionString);
            List<SLO> values = data.GetLearningOutcomes(limit ?? 100, offset ?? 0);

            var example = CompetencyDefinitionSetMapper.Map(values).ToJson();

            if (example == null) return new NotFoundResult();

            return new ObjectResult(example);
        }

        /// <summary>
        /// Request to provide a single competency 
        /// </summary>
        /// <remarks></remarks>
        /// <param name="sourceId">The competency ID provided by this system</param>
        /// <response code="200">A single comptency object was located and returned</response>
        /// <response code="404">No competency was located for the requested sourceId</response>
        [HttpGet]
        [Route("/competencyDefinitions/{sourceId}")]
        [SwaggerOperation("GetCompetencyDefinition")]
        [SwaggerResponse(200, type: typeof(CompetencyDefinitionType))]
        public virtual IActionResult GetCompetencyDefinition([FromRoute]string sourceId)
        {
            CompetencyDefinitionData data = new CompetencyDefinitionData(_connectionString);

            if (!sourceId.Contains('.')) return new BadRequestResult();

            string[] sourceValues = sourceId.Split('.');
            CompetencyDefinitionType result = null;

            switch (sourceValues[0])
            {
                case "SLO":
                    SLO value = data.GetLearningOutcome(sourceId);

                    if (value != null)
                    {
                        result = CompetencyDefinitionSetMapper.Map(value);
                    }
                    break;
            }

            if (result == null) return new NotFoundObjectResult(sourceId);

            return new ObjectResult(result.ToJson());
        }

        /// <summary>
        /// Request a list of rubrics
        /// </summary>
        /// <remarks>It is more appropriate to request a rubric associated to a specific competency</remarks>
        /// <param name="limit">The maximum number of records to be contained in the response.</param>
        /// <param name="offset">The number of the first record to be supplied in the segmented response message.</param>
        /// <param name="filter">The filtering rules to be applied when identifying the records to be supplied in the response message.</param>
        /// <response code="200">List of Rubrics returned</response>
        /// <response code="404">No rubrics located matching the filter criteria</response>
        [HttpGet]
        [Route("/assessments")]
        [SwaggerOperation("GetAllAssessments")]
        [SwaggerResponse(200, type: typeof(AssessmentSetType))]
        public virtual IActionResult GetAllAssessments([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]string sort, [FromQuery]string orderBy, [FromQuery]string filter, [FromQuery]List<string> fields)
        {
            AssessmentContextData data = new AssessmentContextData(_connectionString);

            try
            {
                List<Assessment> values = data.GetAssessments();

                var example = AssessmentSetMapper.Map(values).ToJson();
                return new ObjectResult(example);
            }
            catch (Exception ex)
            {
                return new ContentResult()
                {
                    Content = ex.Message
                };
            }
        }

        /// <summary>
        /// Request a list of rubrics
        /// </summary>
        /// <remarks>It is more appropriate to request a rubric associated to a specific competency</remarks>
        /// <param name="limit">The maximum number of records to be contained in the response.</param>
        /// <param name="offset">The number of the first record to be supplied in the segmented response message.</param>
        /// <param name="filter">The filtering rules to be applied when identifying the records to be supplied in the response message.</param>
        /// <response code="200">List of Rubrics returned</response>
        /// <response code="404">No rubrics located matching the filter criteria</response>
        [HttpGet]
        [Route("/rubrics")]
        [SwaggerOperation("GetAllRubrics")]
        [SwaggerResponse(200, type: typeof(RubricSetType))]
        public virtual IActionResult GetAllRubrics([FromQuery]int? limit, [FromQuery]int? offset, [FromQuery]string sort, [FromQuery]string orderBy, [FromQuery]string filter, [FromQuery]List<string> fields)
        {
            AssessmentContextData data = new AssessmentContextData(_connectionString);

            try
            {
                List<Assessment> values = data.GetAssessments();

                var example = RubricSetMapper.Map(values).ToJson();
                return new ObjectResult(example);
            }
            catch (Exception ex)
            {
                return new ContentResult()
                {
                    Content = ex.Message
                };
            }
        }

        /// <summary>
        /// Request a single rubric
        /// </summary>
        /// <remarks>Rubric source ID should be obtained from the competency</remarks>
        /// <param name="sourcedId">ID of the rubric</param>
        /// <response code="200">Single rubric returned</response>
        /// <response code="404">No rubric located with the reursted ID</response>
        [HttpGet]
        [Route("/rubrics/{sourcedId}")]
        [SwaggerOperation("GetRubric")]
        [SwaggerResponse(200, type: typeof(RubricType))]
        public virtual IActionResult GetRubric([FromRoute]string sourcedId)
        {
            AssessmentContextData data = new AssessmentContextData(_connectionString);

            try
            {
                Assessment value = data.GetAssessment(sourcedId);

                if (value != null)
                {
                    var example = RubricSetMapper.Map(value.Rubric).ToJson();
                    return new ObjectResult(example);
                }
                else return new NotFoundObjectResult(sourcedId);
            }
            catch (Exception ex)
            {
                return new ContentResult()
                {
                    Content = ex.Message
                };
            }
        }
    }
}
